esphome:
  name: petlibro-plaf101
  friendly_name: Petlibro PLAF101

esp8266:
  board: nodemcuv2

logger:

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

captive_portal:

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

button:
  - id: virt_feed_button
    name: "Feed"
    platform: template
    icon: "mdi:cat"
    on_press:
      - logger.log: "Button pressed"

binary_sensor:
  # Physical buttons on the front
  - platform: gpio
    name: "REC_button (GPIO0)"
    id: physical_rec_button
    pin:
      number: GPIO00
      mode:
        input: true
        pullup: false
    filters:
      - invert:
      - delayed_on_off: 25ms

  - platform: gpio
    name: "FEED_button (GPIO4)"
    id: physical_feed_button
    pin:
      number: GPIO04
      mode:
        input: true
        pullup: false
    filters:
      - invert:
      - delayed_on_off: 25ms

  - platform: gpio
    name: "SET_button (GPIO13)"
    id: physical_set_button
    pin:
      number: GPIO13
      mode:
        input: true
        pullup: false
    filters:
      - invert:
      - delayed_on_off: 25ms

  # Endstop on motor axle, detects 60deg rotation increments
  # TODO: Solder this connection
  - platform: gpio
    name: "M_DET (GPIO12)"
    id: physical_motor_endstop
    pin:
      number: GPIO12
      mode:
        input: true
        pullup: true
    filters:
      - invert:
      - delayed_on_off: 25ms

sensor:
  - id: uptime_sensor
    platform: uptime
    type: seconds
    name: Uptime Sensor

  - id: rssi_sensor
    platform: wifi_signal
    update_interval: 30s

switch:
  - platform: gpio
    pin:
      number: GPIO02
      mode: output
    id: led_on_board
    inverted: true
    restore_mode: ALWAYS_OFF

  - id: led2_blue
    platform: gpio
    pin:
      number: GPIO14
      mode: output
    inverted: true
    restore_mode: ALWAYS_OFF

  - id: led1_red
    platform: gpio
    pin:
      number: GPIO16
      mode: output
    inverted: true
    restore_mode: ALWAYS_OFF

  # We only need the motor to spin in one direction, so
  # grounding in_a while driving in_b high should be enough.
  # pin 3 (in_b) straight to GPIO5
  - id: motor_driver_in_b
    name: motor
    icon: "mdi:vertical-rotate-clockwise"
    platform: gpio
    pin:
      number: GPIO5
      mode: output
    restore_mode: ALWAYS_OFF
    disabled_by_default: true # Controls frontend presence


# Notes:
# physical_motor_endstop
#   - on_press increments the amount of scoops served
# There needs to be a timeout on the motor runtime once feeding is started. Preferably parametrized by scoop count.
# Perhaps the each scoop should go through a stop-run-stop cycle, each safeguarded by a timeout on a single scoop?
#
# Use LEDS for
# - motor errors (jam/timeout)
# - wifi connection signaling
# 
# Holding set key should work as a wifi reset function
#   - Add AP
# The whole thing is a state machine, so think in state transitions and triggers
# 
# Schedules? Could be in HASS, coulbe be here